terraform {
  required_providers {
    google = {
      source = "hashicorp/google"
      version = "3.5.0"
    }
  }
}

# ################################################################################
#                          Resources
# ################################################################################
resource "google_compute_instance" "vm_instance" {
    for_each = var.vm_nodes

    # Project
    project = each.value.project_id
    # VM Instance Name
    name = each.value.vm_name

    # Machine Type
    machine_type = "e2-micro"

    # The zone that the machine should be created in. If it is not provided, the provider zone is used.
    zone = each.value.zone

    # desired_status = "RUNNING"

    # Boot Disk and OS
    boot_disk {
        initialize_params {
            image = "debian-cloud/debian-10"
            size = 50
            type = "pd-standard"
        }
    }

    # Network Settings
    network_interface {
        # A default network is created for all GCP projects 
        network = "default"
        access_config {
            # Include this section to give the VM an external ip address
        }
    }

    # Optional Start Script 
    # metadata_startup_script = file("./setup.sh")

    # Service Account to be Used
  #   service_account {
  #     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
  #     email  = "test-service-acc@adns-project-01-303514.iam.gserviceaccount.com"
  #     scopes = ["cloud-platform"]
  # }

  tags = ["http-server","https-server", "externalssh"]

  # Ensure firewall rule is provisioned before server, so that SSH doesn't fail.
  depends_on = ["google_compute_firewall.firewall-externalssh"]


  # Enable SSH By Setting the SSH Public Key File Path
  metadata = {
    ssh-keys = "dnsip04:${file("/home/pasindud/.ssh/gcp_ssh_key.pub")}"
  }
  
  # Note: Provisioners should only be used as a last resort. For most common situations there are better alternatives.
  # The file provisioner is used to copy files or directories from the machine executing Terraform to the newly created resource. 
  # The file provisioner supports both ssh and winrm type connections.
  provisioner "file" {
    
    # This is the source file or folder. It can be specified as relative to the current working directory or as an absolute path. This attribute cannot be specified with content.
    source      = "setup.sh"

    # (Required) This is the destination path. It must be specified as an absolute path.
    destination = "~/script.sh"

    connection {
      # The connection type that should be used. Valid types are ssh and winrm. Defaults to ssh
      type     = "ssh"

      # The port to connect to. Defaults to 22 when using type ssh and defaults to 5985 when using type winrm.
      port = 22

      # The user that we should use for the connection. Defaults to root when using type ssh and defaults to Administrator when using type winrm.
      user     = "dnsip04"
      
      # The password we should use for the connection. In some cases this is specified by the provider. 
      password = ""

      # (Required) The address of the resource to connect to.
      host = self.network_interface[0].access_config[0].nat_ip
      # Note: The self object represents the connection's parent resource, and has all of that resource's attributes. For example, use self.public_ip to reference an gcp_instance's public_ip attribute.

      # The contents of an SSH key to use for the connection. These can be loaded from a file on disk using the file function. This takes preference over the password if provided.
      private_key = "${file("/home/pasindud/.ssh/gcp_ssh_key")}"

      # The timeout to wait for the connection to become available. Should be provided as a string like 30s or 5m. Defaults to 5 minutes.
      timeout = "5m"


    }
  }

  # The remote-exec provisioner invokes a script on a remote resource after it is created. This can be used to run a configuration management tool, bootstrap into a cluster, etc.
  # provisioner "remote-exec" {
  #   connection {
  #     # The connection type that should be used. Valid types are ssh and winrm. Defaults to ssh
  #     type     = "ssh"

  #     # The port to connect to. Defaults to 22 when using type ssh and defaults to 5985 when using type winrm.
  #     port = 22

  #     # The user that we should use for the connection. Defaults to root when using type ssh and defaults to Administrator when using type winrm.
  #     user     = "dnsip04"
      
  #     # The password we should use for the connection. In some cases this is specified by the provider. 
  #     password = ""

  #     # (Required) The address of the resource to connect to.
  #     host = self.network_interface[0].access_config[0].nat_ip
  #     # Note: The self object represents the connection's parent resource, and has all of that resource's attributes. For example, use self.public_ip to reference an gcp_instance's public_ip attribute.

  #     # The contents of an SSH key to use for the connection. These can be loaded from a file on disk using the file function. This takes preference over the password if provided.
  #     private_key = "${file("/home/pasindud/.ssh/ssh_key_dsnip04_01")}"

  #     # The timeout to wait for the connection to become available. Should be provided as a string like 30s or 5m. Defaults to 5 minutes.
  #     timeout = "5m"

  #   }

  #   # This is a list of command strings. They are executed in the order they are provided. This cannot be provided with script or scripts.
  #   inline = []

  #   # **** OR *****
    
  #   # This is a path (relative or absolute) to a local script that will be copied to the remote resource and then executed. This cannot be provided with inline or scripts.
  #   # script = ""

  #   # **** OR *****

  #   # This is a list of paths (relative or absolute) to local scripts that will be copied to the remote resource and then executed. They are executed in the order they are provided. This cannot be provided with inline or script.
  #   # scripts = []


  # }

  provisioner "remote-exec" {
    inline = ["sudo apt update"]

    connection {
      # The connection type that should be used. Valid types are ssh and winrm. Defaults to ssh
      type     = "ssh"

      # The port to connect to. Defaults to 22 when using type ssh and defaults to 5985 when using type winrm.
      port = 22

      # The user that we should use for the connection. Defaults to root when using type ssh and defaults to Administrator when using type winrm.
      user     = var.SSH_user
      
      # The password we should use for the connection. In some cases this is specified by the provider. 
      password = ""

      # (Required) The address of the resource to connect to.
      host = self.network_interface[0].access_config[0].nat_ip
      # Note: The self object represents the connection's parent resource, and has all of that resource's attributes. For example, use self.public_ip to reference an gcp_instance's public_ip attribute.

      # The contents of an SSH key to use for the connection. These can be loaded from a file on disk using the file function. This takes preference over the password if provided.
      private_key = "${file("/home/pasindud/.ssh/gcp_ssh_key")}"

      # The timeout to wait for the connection to become available. Should be provided as a string like 30s or 5m. Defaults to 5 minutes.
      timeout = "5m"


    }
  }

  provisioner "local-exec" {
    command = "ansible-playbook -u fedora -i '${self.public_ip},' --private-key ${var.ssh_key_private} provision.yml" 
  }
  provisioner "local-exec" {
    command = "ANSIBLE_HOST_KEY_CHECKING=\"False\" ansible-playbook -u ${var.SSH_user} --private-key=\"/home/pasindud/.ssh/gcp_ssh_key\" --extra-vars='{"region": ${each.value.region}, "zone": ${each.value.zone}, "vm_name": ${each.value.vm_name} }' -i '${azurerm_public_ip.pnic.ip_address},' ansible/deploy-with-ansible.yml"
  }

}


# ################################################################################
#                             Firewall Rules
# ################################################################################
resource "google_compute_firewall" "firewall-externalssh" {
  project = var.projects["ADNS_Project_01"]
  name    = "firewall-externalssh"
  network = "default"

  allow {
    protocol = "tcp"
    ports    = ["22"]
  }

  source_ranges = ["0.0.0.0/0"]
  target_tags   = ["externalssh"]
}


# ################################################################################
#                                      Output
# ################################################################################ 
# output "ip" {
#     value = google_compute_instance.vm_instance_04[0].network_interface.0.access_config.0.nat_ip
    
#   }